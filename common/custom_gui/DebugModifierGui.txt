custom_text_box = {
    name = debug_prov_mod_header_text #Must match a scripted instantTextBoxType in a .gui file
    potential = {
		AND = {
			FROM = { ai = no }
			FROM = { has_country_flag = debug_mode_active }
			FROM = { has_country_flag = debug_menu_active }
			FROM = { has_country_flag = debug_province_modifier_menu_active }
		}
	} #Determines when the text is visible
    #tooltip = ESTATE_ACTION_DESCRIPTION #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_button = {
	name = debug_prev_prov_mod_page_button
	potential = {
		AND = {
			FROM = { ai = no }
			FROM = { has_country_flag = debug_mode_active }
			FROM = { has_country_flag = debug_menu_active }
			FROM = { has_country_flag = debug_province_modifier_menu_active }
		}
	}
	trigger = {
		hidden_trigger = { FROM = { ai = no } }
		hidden_trigger = {
			FROM = {
				check_variable = {
					which = debug_prov_mod_page_variable
					value = 1
				}
			}
		}
	}
	effect = { 
		hidden_effect = {
			FROM = {
				change_variable = {
					which = debug_prov_mod_page_variable
					value = -1
				}
			}
		}
	}
	#tooltip = debug_toggle_raise_lower_dev_text_tooltip
}

custom_button = {
	name = debug_next_prov_mod_page_button
	potential = {
		AND = {
			FROM = { ai = no }
			FROM = { has_country_flag = debug_mode_active }
			FROM = { has_country_flag = debug_menu_active }
			FROM = { has_country_flag = debug_province_modifier_menu_active }
		}
	}
	trigger = {
		hidden_trigger = { FROM = { ai = no } }
		hidden_trigger = {
			FROM = {
				NOT = {
					check_variable = {
						which = debug_prov_mod_page_variable
						value = 1
					}
				}
			}
		}
	}
	effect = { 
		hidden_effect = {
			FROM = {
				change_variable = {
					which = debug_prov_mod_page_variable
					value = 1
				}
			}
		}
	}
	#tooltip = debug_toggle_raise_lower_dev_text_tooltip
}

custom_button = {
	name = debug_prov_mod_sep_dec_button
	potential = {
		AND = {
			FROM = { ai = no }
			FROM = { has_country_flag = debug_mode_active }
			FROM = { has_country_flag = debug_menu_active }
			FROM = { has_country_flag = debug_province_modifier_menu_active }
		}
		FROM = {
			check_variable = {
				which = debug_prov_mod_page_variable
				value = 0
			}
			NOT = {
				check_variable = {
					which = debug_prov_mod_page_variable
					value = 1
				}
			}
		}
	}
	trigger = {
	}
	effect = { 
		if = {
			limit = {
				FROM = { NOT = { has_country_flag = debug_using_state_scope } }
			}
			add_nationalism = -1
		}
		else = {
			area = {
				add_nationalism = -1
			}
		}
	}
}

custom_button = {
	name = debug_prov_mod_sep_inc_button
	potential = {
		AND = {
			FROM = { ai = no }
			FROM = { has_country_flag = debug_mode_active }
			FROM = { has_country_flag = debug_menu_active }
			FROM = { has_country_flag = debug_province_modifier_menu_active }
		}
		FROM = {
			check_variable = {
				which = debug_prov_mod_page_variable
				value = 0
			}
			NOT = {
				check_variable = {
					which = debug_prov_mod_page_variable
					value = 1
				}
			}
		}
	}
	trigger = {
	}
	effect = { 
		if = {
			limit = {
				FROM = { NOT = { has_country_flag = debug_using_state_scope } }
			}
			add_nationalism = 1
		}
		else = {
			area = {
				add_nationalism = 1
			}
		}
	}
}

custom_button = {
	name = debug_prov_mod_pros_dec_button
	potential = {
		AND = {
			FROM = { ai = no }
			FROM = { has_country_flag = debug_mode_active }
			FROM = { has_country_flag = debug_menu_active }
			FROM = { has_country_flag = debug_province_modifier_menu_active }
		}
		FROM = {
			check_variable = {
				which = debug_prov_mod_page_variable
				value = 0
			}
			NOT = {
				check_variable = {
					which = debug_prov_mod_page_variable
					value = 1
				}
			}
		}
	}
	trigger = {
	}
	effect = { 
		if = {
			limit = {
				FROM = { NOT = { has_country_flag = debug_using_state_scope } }
			}
			add_prosperity = -10
		}
		else = {
			area = {
				add_prosperity = -10
			}
		}
	}
}

custom_button = {
	name = debug_prov_mod_pros_inc_button
	potential = {
		AND = {
			FROM = { ai = no }
			FROM = { has_country_flag = debug_mode_active }
			FROM = { has_country_flag = debug_menu_active }
			FROM = { has_country_flag = debug_province_modifier_menu_active }
		}
		FROM = {
			check_variable = {
				which = debug_prov_mod_page_variable
				value = 0
			}
			NOT = {
				check_variable = {
					which = debug_prov_mod_page_variable
					value = 1
				}
			}
		}
	}
	trigger = {
	}
	effect = { 
		if = {
			limit = {
				FROM = { NOT = { has_country_flag = debug_using_state_scope } }
			}
			add_prosperity = 10
		}
		else = {
			area = {
				add_prosperity = 10
			}
		}
	}
}

custom_button = {
	name = debug_prov_mod_aut_dec_button
	potential = {
		AND = {
			FROM = { ai = no }
			FROM = { has_country_flag = debug_mode_active }
			FROM = { has_country_flag = debug_menu_active }
			FROM = { has_country_flag = debug_province_modifier_menu_active }
		}
		FROM = {
			check_variable = {
				which = debug_prov_mod_page_variable
				value = 0
			}
			NOT = {
				check_variable = {
					which = debug_prov_mod_page_variable
					value = 1
				}
			}
		}
	}
	trigger = {
	}
	effect = { 
		if = {
			limit = {
				FROM = { NOT = { has_country_flag = debug_using_state_scope } }
			}
			add_local_autonomy = -10
		}
		else = {
			area = {
				add_local_autonomy = -10
			}
		}
	}
}

custom_button = {
	name = debug_prov_mod_aut_inc_button
	potential = {
		AND = {
			FROM = { ai = no }
			FROM = { has_country_flag = debug_mode_active }
			FROM = { has_country_flag = debug_menu_active }
			FROM = { has_country_flag = debug_province_modifier_menu_active }
		}
		FROM = {
			check_variable = {
				which = debug_prov_mod_page_variable
				value = 0
			}
			NOT = {
				check_variable = {
					which = debug_prov_mod_page_variable
					value = 1
				}
			}
		}
	}
	trigger = {
	}
	effect = { 
		if = {
			limit = {
				FROM = { NOT = { has_country_flag = debug_using_state_scope } }
			}
			add_local_autonomy = 10
		}
		else = {
			area = {
				add_local_autonomy = 10
			}
		}
	}
}

##############################  Supported files with scopes ##############################
#   The Gui objects must be directly inside the specified window Gui element!
#   FROM is always the country that clicks
#   provinceview.gui:
#       province_window         (ROOT: Clicked province)
#       buildings_window        (ROOT: Clicked province)
#       state_window            (ROOT: Clicked province)
#   countrycourtview.gui:
#       countrycourtview        (ROOT = FROM)
#   countrygovernmentview.gui:
#       countrygovernmentview   (ROOT = FROM)
#   countrydiplomacyview.gui:
#       countrydiplimacyview    (ROOT: Selected country)
#   countryeconomyview.gui:
#       countryeconomyview      (ROOT = FROM)
#   countrytradeview.gui:
#       countrytradeview        (ROOT = FROM)
#   countrytechnologyview.gui:
#       countrytechnologyview   (ROOT = FROM)
#   countryideasview.gui:
#       countryideasview        (ROOT = FROM)
#   countrymissionsview.gui:
#       countrymissionsview     (ROOT: Selected country)
#   countrydecisionview.gui:
#       countrydecisionsview    (ROOT = FROM)
#   countrystabilityview.gui:
#       countrystabilityview    (ROOT = FROM)
#   countryreligionview.gui:
#       countryreligionview     (ROOT = FROM)
#   countrymilitaryview.gui:
#       countrymilitaryview     (ROOT = FROM)
#   countrysubjectsview.gui:
#       countrysubjectview      (ROOT = FROM)
#   countryestatesview.gui:
#       countryestatesview      (ROOT = FROM)
#   ages_view.gui:
#       ages_view               (ROOT = FROM)
#   tradeinterface.gui:
#       TradeNodeInterface      (ROOT: Trade capital of a trade node)
#   hre.gui:
#       hre_window              (ROOT = FROM)
#   papacy.gui:
#       papacy_window           (ROOT = FROM)
#   faction.gui:
#       All faction windows     (ROOT = FROM)
#   celestialempireview.gui:
#       celestial_window        (ROOT = FROM)
#   countrynativesview.gui:
#       natives_window          (ROOT = FROM)
#   religiousreforms.gui:
#       reforms_window          (ROOT = FROM)
#   parliament.gui:
#       parliament_window       (ROOT = FROM)
